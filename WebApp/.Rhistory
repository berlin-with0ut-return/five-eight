runApp('C:/Users/sherr/School/five-eight/WebApp')
shiny::runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
install.packageS("shinyWidgets")
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
shiny::runApp('C:/Users/sherr/School/five-eight/WebApp')
library(readxl)
library(dplyr)
scores <- read_excel("/Users/sherr/School/five-eight/scores.xlsx")
head(scores)
names(scores)
hs_cts <- (scores %>% group_by(hair_nm, type) %>% tally)[[3]]
hs_means <- aggregate(scores[, c(3, 8)], list(scores$type, scores$hair_nm), mean)
hs_means$count <- hs_cts
head(hs_means)
mu_cts <- (scores %>% group_by(mu_nm, type) %>% tally)[[3]]
mu_means <- aggregate(scores[, c(5, 8)], list(scores$type, scores$mu_nm), mean)
mu_means$count <- mu_cts
head(mu_means)
st_cts <- (scores %>% group_by(ST, type) %>% tally)[[3]]
st_means <- aggregate(scores[8], list(scores$type, scores$ST), mean)
st_means$count <- st_cts
head(st_means)
hs_means$pen_score <- hs_means$score - 1/(hs_means$count)
mu_means$pen_score <- mu_means$score - 1/(mu_means$count)
st_means$pen_score <- st_means$score - 1/(st_means$count)
names(hs_means)[1] <- "chal_type"
names(hs_means)[2] <- "hs_nm"
names(mu_means)[1] <- "chal_type"
names(mu_means)[2] <- "mu_nm"
names(st_means)[1] <- "chal_type"
names(mu_means)[2] <- "st_nm"
get_hair <- function(lvl, chaltype) {
valid_hs <- subset(hs_means, chal_type == chaltype & hair_lvl <= lvl)
if (dim(valid_hs)[1] == 0) {
return("invalid")
} else {
sorted_hs <- valid_hs[order(-valid_hs$pen_score),]
rownames(sorted_hs) <- 1:nrow(sorted_hs)
best_hs <- sorted_hs[1, 2]
lvl_hs <- sorted_hs[1, 3]
avg_hs <- round(sorted_hs[1, 4], 2)
return(list(best_hs, lvl_hs, avg_hs))
}
}
get_mu <- function(lvl, chaltype) {
valid_mu <- subset(mu_means, chal_type == chaltype & mu_lvl <= lvl)
if (dim(valid_mu)[1] == 0) {
return("invalid")
} else {
sorted_mu <- valid_mu[order(-valid_mu$pen_score),]
rownames(sorted_mu) <- 1:nrow(sorted_mu)
best_mu <- sorted_mu[1, 2]
lvl_mu <- sorted_mu[1, 3]
avg_mu <- round(sorted_mu[1, 4], 2)
return(list(best_mu, lvl_mu, avg_mu))
}
}
get_st <- function(chaltype) {
valid_st <- subset(st_means, chal_type == chaltype)
if (dim(valid_st)[1] == 0) {
return("invalid")
} else {
sorted_st <- valid_st[order(-valid_st$pen_score),]
rownames(sorted_st) <- 1:nrow(sorted_st)
best_st <- sorted_st[1, 2]
avg_st <- round(sorted_st[1, 3], 2)
return(list(best_st, avg_st))
}
}
categories <- c('casual', 'royal', 'magical', 'sports', 'formal', 'professional', 'African', 'Spanish',
'punk', 'scifi', 'horror', 'bridal', 'retro', 'Asian')
random_cat <- sample(categories, 1)
get_hair(sample(1:85, 1), random_cat)
library(shiny)
library(readxl)
library(shinyWidgets)
source("/Users/sherr/School/five-eight/WebApp/helpers.R")
scores <- read_excel("/Users/sherr/School/five-eight/scores.xlsx")
head(scores)
# Define UI for application
ui <- fluidPage(
setBackgroundColor(
color = "pink",
gradient = c("linear", "radial"),
direction = c("bottom", "top", "right", "left"),
shinydashboard = FALSE
),
# Application title
titlePanel(title = span("five-eight ",
style = "font-family: 'times'; sans-serif")),
sidebarLayout(
sidebarPanel(
selectInput("chalType", label = h4("Choose your challenge type"),
choices = list("African", "Asian", "bridal",
"casual", "formal", "horror",
"magical", "professional", "punk",
"retro", "royal", "scifi",
"Spanish", "sports")
),
numericInput("lvl", label = h4("Choose a level (1 - 85)"), value = NA, min = 1, max = 85)
),
conditionalPanel(
condition = "input.lvl > 0",
textOutput("hs_nm"),
textOutput("hs_avg"),
textOutput("hs_col"),
br(),
textOutput("mu_nm"),
textOutput("mu_avg"),
br(),
textOutput("st_nm"),
textOutput("st_avg")
),
)
)
# Define server logic
server <- function(input, output, session) {
hs_recs <- reactive({
get_hair(input$lvl, input$chalType)
})
output$hs_nm <- renderText({
paste("Suggested hairstyle: ", hs_recs()[1], "( Level ", hs_recs()[2], ")")
})
output$hs_avg <- renderText({
paste("This hairstyle scores", hs_recs()[3], "on average in", input$chalType, "themed challenges")
})
mu_recs <- reactive({
get_mu(input$lvl, input$chalType)
})
output$mu_nm <- renderText({
paste("Suggested makeup: ", mu_recs()[1], "( Level ", mu_recs()[2], ')')
})
output$mu_avg <- renderText({
paste("This makeup scores", mu_recs()[3], "on average in", input$chalType, "themed challenges")
})
st_rects <- reactive({
get_st(input$chalType)
})
output$st_nm <- renderText({
paste("Suggested skin tone: ", st_rects()[1])
})
output$st_avg <- renderText({
paste("This skin tone scores", st_rects()[2], "on average in", input$chalType, "themed challenges")
})
output$invalid_msg <- renderText({
paste("Please input a valid level")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(readxl)
library(dplyr)
scores <- read_excel("/Users/sherr/School/five-eight/scores.xlsx")
head(scores)
names(scores)
hs_cts <- (scores %>% group_by(hair_nm, type) %>% tally)[[3]]
hs_means <- aggregate(scores[, c(3, 8)], list(scores$type, scores$hair_nm), mean)
hs_means$count <- hs_cts
head(hs_means)
mu_cts <- (scores %>% group_by(mu_nm, type) %>% tally)[[3]]
mu_means <- aggregate(scores[, c(5, 8)], list(scores$type, scores$mu_nm), mean)
mu_means$count <- mu_cts
head(mu_means)
st_cts <- (scores %>% group_by(ST, type) %>% tally)[[3]]
st_means <- aggregate(scores[8], list(scores$type, scores$ST), mean)
st_means$count <- st_cts
head(st_means)
hs_means$pen_score <- hs_means$score - 1/(hs_means$count)
mu_means$pen_score <- mu_means$score - 1/(mu_means$count)
st_means$pen_score <- st_means$score - 1/(st_means$count)
names(hs_means)[1] <- "chal_type"
names(hs_means)[2] <- "hs_nm"
names(mu_means)[1] <- "chal_type"
names(mu_means)[2] <- "mu_nm"
names(st_means)[1] <- "chal_type"
names(mu_means)[2] <- "st_nm"
get_hair <- function(lvl, chaltype) {
valid_hs <- subset(hs_means, chal_type == chaltype & hair_lvl <= lvl)
if (dim(valid_hs)[1] == 0) {
return("invalid")
} else {
sorted_hs <- valid_hs[order(-valid_hs$pen_score),]
rownames(sorted_hs) <- 1:nrow(sorted_hs)
best_hs <- sorted_hs[1, 2]
lvl_hs <- sorted_hs[1, 3]
avg_hs <- round(sorted_hs[1, 4], 2)
return(list(best_hs, lvl_hs, avg_hs))
}
}
get_mu <- function(lvl, chaltype) {
valid_mu <- subset(mu_means, chal_type == chaltype & mu_lvl <= lvl)
if (dim(valid_mu)[1] == 0) {
return("invalid")
} else {
sorted_mu <- valid_mu[order(-valid_mu$pen_score),]
rownames(sorted_mu) <- 1:nrow(sorted_mu)
best_mu <- sorted_mu[1, 2]
lvl_mu <- sorted_mu[1, 3]
avg_mu <- round(sorted_mu[1, 4], 2)
return(list(best_mu, lvl_mu, avg_mu))
}
}
get_st <- function(chaltype) {
valid_st <- subset(st_means, chal_type == chaltype)
if (dim(valid_st)[1] == 0) {
return("invalid")
} else {
sorted_st <- valid_st[order(-valid_st$pen_score),]
rownames(sorted_st) <- 1:nrow(sorted_st)
best_st <- sorted_st[1, 2]
avg_st <- round(sorted_st[1, 3], 2)
return(list(best_st, avg_st))
}
}
categories <- c('casual', 'royal', 'magical', 'sports', 'formal', 'professional', 'African', 'Spanish',
'punk', 'scifi', 'horror', 'bridal', 'retro', 'Asian')
random_cat <- sample(categories, 1)
get_hair(sample(1:85, 1), random_cat)
runApp('C:/Users/sherr/School/five-eight/WebApp')
shiny::runApp('C:/Users/sherr/School/five-eight/WebApp')
library(readxl)
library(dplyr)
scores <- read_excel("/Users/sherr/School/five-eight/scores.xlsx")
head(scores)
names(scores)
hs_cts <- (scores %>% group_by(hair_nm, type) %>% tally)[[3]]
hs_means <- aggregate(scores[, c(3, 8)], list(scores$type, scores$hair_nm), mean)
hs_means$count <- hs_cts
head(hs_means)
mu_cts <- (scores %>% group_by(mu_nm, type) %>% tally)[[3]]
mu_means <- aggregate(scores[, c(5, 8)], list(scores$type, scores$mu_nm), mean)
mu_means$count <- mu_cts
head(mu_means)
st_cts <- (scores %>% group_by(ST, type) %>% tally)[[3]]
st_means <- aggregate(scores[8], list(scores$type, scores$ST), mean)
st_means$count <- st_cts
head(st_means)
hs_means$pen_score <- hs_means$score - 1/(hs_means$count)
mu_means$pen_score <- mu_means$score - 1/(mu_means$count)
st_means$pen_score <- st_means$score - 1/(st_means$count)
names(hs_means)[1] <- "chal_type"
names(hs_means)[2] <- "hs_nm"
names(mu_means)[1] <- "chal_type"
names(mu_means)[2] <- "mu_nm"
names(st_means)[1] <- "chal_type"
names(mu_means)[2] <- "st_nm"
get_hair <- function(lvl, chaltype) {
valid_hs <- subset(hs_means, chal_type == chaltype & hair_lvl <= lvl)
if (dim(valid_hs)[1] == 0) {
return("invalid")
} else {
sorted_hs <- valid_hs[order(-valid_hs$pen_score),]
rownames(sorted_hs) <- 1:nrow(sorted_hs)
best_hs <- sorted_hs[1, 2]
lvl_hs <- sorted_hs[1, 3]
avg_hs <- round(sorted_hs[1, 4], 2)
return(list(best_hs, lvl_hs, avg_hs))
}
}
get_mu <- function(lvl, chaltype) {
valid_mu <- subset(mu_means, chal_type == chaltype & mu_lvl <= lvl)
if (dim(valid_mu)[1] == 0) {
return("invalid")
} else {
sorted_mu <- valid_mu[order(-valid_mu$pen_score),]
rownames(sorted_mu) <- 1:nrow(sorted_mu)
best_mu <- sorted_mu[1, 2]
lvl_mu <- sorted_mu[1, 3]
avg_mu <- round(sorted_mu[1, 4], 2)
return(list(best_mu, lvl_mu, avg_mu))
}
}
get_st <- function(chaltype) {
valid_st <- subset(st_means, chal_type == chaltype)
if (dim(valid_st)[1] == 0) {
return("invalid")
} else {
sorted_st <- valid_st[order(-valid_st$pen_score),]
rownames(sorted_st) <- 1:nrow(sorted_st)
best_st <- sorted_st[1, 2]
avg_st <- round(sorted_st[1, 3], 2)
return(list(best_st, avg_st))
}
}
categories <- c('casual', 'royal', 'magical', 'sports', 'formal', 'professional', 'African', 'Spanish',
'punk', 'scifi', 'horror', 'bridal', 'retro', 'Asian')
random_cat <- sample(categories, 1)
get_hair(sample(1:85, 1), random_cat)
library(readxl)
library(dplyr)
scores <- read_excel("/Users/sherr/School/five-eight/scores.xlsx")
head(scores)
names(scores)
hs_cts <- (scores %>% group_by(hair_nm, type) %>% tally)[[3]]
hs_means <- aggregate(scores[, c(3, 8)], list(scores$type, scores$hair_nm), mean)
hs_means$count <- hs_cts
head(hs_means)
mu_cts <- (scores %>% group_by(mu_nm, type) %>% tally)[[3]]
mu_means <- aggregate(scores[, c(5, 8)], list(scores$type, scores$mu_nm), mean)
mu_means$count <- mu_cts
head(mu_means)
st_cts <- (scores %>% group_by(ST, type) %>% tally)[[3]]
st_means <- aggregate(scores[8], list(scores$type, scores$ST), mean)
st_means$count <- st_cts
head(st_means)
hs_means$pen_score <- hs_means$score - 1/(hs_means$count)
mu_means$pen_score <- mu_means$score - 1/(mu_means$count)
st_means$pen_score <- st_means$score - 1/(st_means$count)
names(hs_means)[1] <- "chal_type"
names(hs_means)[2] <- "hs_nm"
names(mu_means)[1] <- "chal_type"
names(mu_means)[2] <- "mu_nm"
names(st_means)[1] <- "chal_type"
names(mu_means)[2] <- "st_nm"
get_hair <- function(lvl, chaltype) {
valid_hs <- subset(hs_means, chal_type == chaltype & hair_lvl <= lvl)
if (dim(valid_hs)[1] == 0) {
return("invalid")
} else {
sorted_hs <- valid_hs[order(-valid_hs$pen_score),]
rownames(sorted_hs) <- 1:nrow(sorted_hs)
best_hs <- sorted_hs[1, 2]
lvl_hs <- sorted_hs[1, 3]
avg_hs <- round(sorted_hs[1, 4], 2)
return(list(best_hs, lvl_hs, avg_hs))
}
}
get_mu <- function(lvl, chaltype) {
valid_mu <- subset(mu_means, chal_type == chaltype & mu_lvl <= lvl)
if (dim(valid_mu)[1] == 0) {
return("invalid")
} else {
sorted_mu <- valid_mu[order(-valid_mu$pen_score),]
rownames(sorted_mu) <- 1:nrow(sorted_mu)
best_mu <- sorted_mu[1, 2]
lvl_mu <- sorted_mu[1, 3]
avg_mu <- round(sorted_mu[1, 4], 2)
return(list(best_mu, lvl_mu, avg_mu))
}
}
get_st <- function(chaltype) {
valid_st <- subset(st_means, chal_type == chaltype)
if (dim(valid_st)[1] == 0) {
return("invalid")
} else {
sorted_st <- valid_st[order(-valid_st$pen_score),]
rownames(sorted_st) <- 1:nrow(sorted_st)
best_st <- sorted_st[1, 2]
avg_st <- round(sorted_st[1, 3], 2)
return(list(best_st, avg_st))
}
}
categories <- c('casual', 'royal', 'magical', 'sports', 'formal', 'professional', 'African', 'Spanish',
'punk', 'scifi', 'horror', 'bridal', 'retro', 'Asian')
random_cat <- sample(categories, 1)
get_hair(sample(1:85, 1), random_cat)
runApp('C:/Users/sherr/School/five-eight/WebApp')
shiny::runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
shiny::runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp()
shiny::runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
runApp('C:/Users/sherr/School/five-eight/WebApp')
library(shiny)
library(readxl)
library(shinyWidgets)
source("helpers.R")
scores <- read_excel("scores.xlsx")
head(scores)
# Define UI for application
ui <- fluidPage(
tags$head(
tags$style(HTML("
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@900&family=Roboto:wght@300&family=Raleway:wght@300&');
#sidebar {
background-color: #ebbdff;
border-color: white;
font-family: 'Roboto', sans-serif;
}
#hs_nm {
font-family: 'Roboto', sans-serif;
}
#hs_avg {
font-family: 'Roboto', sans-serif;
}
#mu_nm {
font-family: 'Roboto', sans-serif;
}
#mu_avg {
font-family: 'Roboto', sans-serif;
}
#st_nm {
font-family: 'Roboto', sans-serif;
}
#st_avg {
font-family: 'Roboto', sans-serif;
}
#hs_img {
position:absolute;
left: 190px;
}
#mu_img {
position: absolute;
left: 20px;
}
"))
),
setBackgroundImage(src = 'background.png'
),
# Application title
titlePanel(h1("five-eight",
style = "font-family: 'Montserrat', sans-serif; font-weight: bold; color: #75244e;")),
sidebarLayout(
sidebarPanel(id = "sidebar",
selectInput("chalType", label = h5("Choose your challenge type",
style = "font-family: 'Raleway', sans-serif; font-weight: bold;"),
choices = list("African", "Asian", "bridal",
"casual", "formal", "horror",
"magical", "professional", "punk",
"retro", "royal", "scifi",
"Spanish", "sports")
),
numericInput("lvl", label = h5("Choose a level (1 - 85)",
style = "font-family: 'Raleway', sans-serif; font-weight: bold;"),
value = NA, min = 1, max = 85)
),
mainPanel(
conditionalPanel(
condition = "input.lvl > 0",
textOutput("hs_nm"),
textOutput("hs_avg"),
br(),
textOutput("mu_nm"),
textOutput("mu_avg"),
br(),
textOutput("st_nm"),
textOutput("st_avg"),
br(),
div(imageOutput("hs_img")),
imageOutput("mu_img")
),
)
)
)
# Define server logic
server <- function(input, output, session) {
hs_recs <- reactive({
get_hair(input$lvl, input$chalType)
})
output$hs_nm <- renderText({
paste("Hairstyle: ", hs_recs()[1], "( Level ", hs_recs()[2], ")")
})
output$hs_avg <- renderText({
paste("This hairstyle scores", hs_recs()[3], "on average in", input$chalType, "themed challenges")
})
output$hs_img <- renderImage({
filename <- normalizePath(file.path('./www',
paste(hs_recs()[1], '.gif', sep='')))
# Return a list containing the filename and alt text
list(src = filename,
width = "150px",
height = "auto")
}, deleteFile = FALSE)
mu_recs <- reactive({
get_mu(input$lvl, input$chalType)
})
output$mu_nm <- renderText({
paste("Makeup: ", mu_recs()[1], "( Level ", mu_recs()[2], ')')
})
output$mu_avg <- renderText({
paste("This makeup scores", mu_recs()[3], "on average in", input$chalType, "themed challenges")
})
output$mu_img <- renderImage({
filename <- normalizePath(file.path('./www',
paste(mu_recs()[1], '.gif', sep='')))
# Return a list containing the filename and alt text
list(src = filename,
width = "150px",
height = "auto")
}, deleteFile = FALSE)
st_rects <- reactive({
get_st(input$chalType)
})
output$st_nm <- renderText({
paste("Skin tone: ", st_rects()[1])
})
output$st_avg <- renderText({
paste("This skin tone scores", st_rects()[2], "on average in", input$chalType, "themed challenges")
})
}
# Run the application
shinyApp(ui = ui, server = server)
setwd("/Users/sherr/School/five-eight/WebApp/")
runApp()
